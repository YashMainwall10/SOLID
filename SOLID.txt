

<------ SOLID PRINCIPLES ------> 

Advantage -> 

i.   Avoid Duplicate Code 
ii.  Easy to Maintain 
iii. Flexible Code 
 

S -> Sinlge Responsibilty Principle 
O -> Open / Closed Principle
L -> Liskov Substitution Principle 
I -> Interface Segmented Principle
D -> Dependency Inversion Principle 


1. SINGLE RESPONSIBILITY PRINCIPLE -> 

A class should have only one reason to change i.e. a class should have only one job . 


class SmartPhone{
    String company ;
    String modelNo ;
    int MRP ;
    SmartPhone(String company , String modelNo , int MRP){
        this.company = company ;
        this.modelNo = modelNo ;
        this.MRP = MRP ;
    }

}

class Bill{
    private SmartPhone smartPhone ;
    private int quantity ;
    public static int billNumber = 0 ;
    private int currentBillNumber ;
    Bill(SmartPhone smartPhone , int quantity){
        this.quantity = quantity ;
        this.smartPhone = smartPhone ;
        this.currentBillNumber = billNumber ;
    }
    public double generateBill(){
        return this.smartPhone.MRP * this.quantity - (0.1 * this.smartPhone.MRP);
    }
    public void saveBillToDB(){
        System.out.println("Saved Bill To DB");
    }
}

Here there are multiple jobs in the Bill class as it is generating bill amount and saving it to the DB as well.

Solution as per Sinlge Responsibilty Principle... ->

class Bill{
    private SmartPhone smartPhone ;
    private int quantity ;
    public static int billNumber = 0 ;
    private int currentBillNumber ;
    Bill(SmartPhone smartPhone , int quantity){
        this.quantity = quantity ;
        this.smartPhone = smartPhone ;
        this.currentBillNumber = billNumber ;
    }
    public double generateBill(){
        return this.smartPhone.MRP * this.quantity - (0.1 * this.smartPhone.MRP);
    }
    
}


class DAO{
    Bill bill ; 
    DAO(Bill bill){
        this.bill = bill ; 
    }
    public void saveBillToDB(){
        System.out.println("Saved Bill To DB");
    }
}

Here there are two classes having different jobs one is to generateBill and Other is to save Bill TO DB . 

2. OPEN / CLOSED PRINCIPLE ...->
Classed should be open for extension but not for modifications.  

class DAO{
    Bill bill ;
    DAO(Bill bill){
        this.bill = bill ;
    }
    public void saveBillToDB(){
        System.out.println("Saved Bill To DB");
    }   
}

Here what we also want to save to add a new method to saveToFile as well ; 
 
class DAO{
    Bill bill ;
    DAO(Bill bill){
        this.bill = bill ;
    }
    public void saveBillToDB(){
        System.out.println("Saved Bill To DB");
    }
    public void saveBillToFile(){
        System.out.println("Save Bill To File");
    }
}

Here we have to modify our DAO class and it also is having two Responsibilties which is not good according 
to our SOLID Principles . 

So we have to extend it in such a way is follows SOLID. 

interface saveBill{
    void saveBill(Bill bill) ;
}

class DataBaseSave implements saveBill{
    @Override
    public void saveBill(Bill bill) {
        System.out.println("Saved Bill To DB");
    }
}

class FileSave implements saveBill{
    @Override
    public void saveBill(Bill bill) {
        System.out.println("Save Bill To File");
    }
}

Here the saveBill interface is open for extension and adding different methods to save.

3. LISKOV SUBSTITUTION PRINCIPLE 

Objects of a superclass can be replaced with objects of its subclasses without altering the program's correctness.

The subclasses should extend more properties from the parent class rather than narrow it down. 

class PaymentProcessor{
    public void processPayment(double amount){
        System.out.println("Processing a payment "+ amount);
    }
}
class creditCardPaymentProcessor extends PaymentProcessor{
    @Override
    public void processPayment(double amount) {
        System.out.println("Processing a Credit Card Payment" + amount );
    }
}
class cryptoCurrencyPaymentProcessor extends PaymentProcessor{
    @Override
    public void processPayment(double amount) {
        throw new UnsupportedOperationException("Crypto Payment processor is under Maintenance");
    }
}

Here the cryptoCurrencyPaymentProcessor classes's method processPayment is narrowing down the parent classes's 
properties which is not good. 

abstract class PaymentProcessor{
    public abstract void processPayment(double amount) ;
}
class creditCardPaymentProcessor extends PaymentProcessor{
    @Override
    public void processPayment(double amount) {
        System.out.println("Processing a Credit Card Payment" + amount );
    }
}
class cryptoCurrencyPaymentProcessor extends PaymentProcessor{
    @Override
    public void processPayment(double amount) {
        System.out.println("Processing a Crypto Currency Payment" + amount );
    }
}

Here cryptoCurrencyPaymentProcessor method processPayment handles the payment in a better way.  

4. INTERFACE SEGREGATION PRINCIPLE ...-> 

A class should not implement the methods (interface) it dose not use . 

interface bike{
    void startEngine() ; 
    void repairWheels() ; 
}

class MotorBike implements bike{
    @Override
    public void startEngine() {
        //engine started
    }
    @Override
    public void repairWheels() {
       //start wheel repair
    }
}

class Bicycle implements bike{
    @Override
    public void startEngine() {
        //No need as there is on engine
    }
    @Override
    public void repairWheels() {
        //start wheel repair
    }
}

Here the Bicycle class doesnt need the startEngine method as there is no engine in the Bicycle. 

interface bikeWithEngine{
    void startEngine() ;
}
interface bikeRepairWheels{
    void repairWheels() ;
}
class MotorBike implements bikeWithEngine , bikeRepairWheels{
    @Override
    public void startEngine() {
        //engine started
    }
    @Override
    public void repairWheels() {
       //start wheel repair
    }
}
class Bicycle implements bikeRepairWheels{
    @Override
    public void repairWheels() {
        //start wheel repair
    }
}

Here we can create two different interfaces just to make sure that there is no need to implements the 
startEngine method.

5. DEPENDENCY INVERSION PRINCIPLE ...-> 

Classes should depend upon interfaces(abstraction) rather than concrete classes. 

interface Keyboard{
    //Some functions
}
class WiredKeyBoard implements Keyboard{
   
}
class BlueToothKeyBoard implements Keyboard{

}
class Macbook{
    private WiredKeyBoard keyBoard ;
    Macbook(){
        this.keyBoard = new WiredKeyBoard() ;
    }
}

Here what if we need to change it to BlueToothKeyBoard in Macbook class we cannot as it will break the previous 
objects. 

class Macbook{
    private Keyboard keyBoard ;
    Macbook(Keyboard keyBoard){
        this.keyBoard = keyBoard;
    }
}
Here we can change the Macbook class like this and we can pass the type of Keyboard we want. 
Our class is Depended on interfaces rather than concrete classes.


