The basics of Design Pattern->

Subject:
-> The subject maintains a list of observers (subscribers or listeners).
-> It Provides methods to register and unregister observers dynamically and defines a method to notify observers of changes in its state.

Observer:
-> Observer defines an interface with an update method that concrete observers must implement and 
   ensures a common or consistent way for concrete observers to receive updates from the subject.


interface Observer{
    void updateData(String data) ;
}
interface Subject{
    void addObserver(Observer observer) ;
    void deleteObserver(Observer observer) ;
    void notifyObserver() ;
}

class Amazon implements Subject{
    private List<Observer>observerList= new ArrayList<>() ;
    String data ;
    @Override
    public void addObserver(Observer observer) {
        observerList.add(observer) ;
    }

    @Override
    public void deleteObserver(Observer observer) {
        observerList.remove(observer) ;
    }

    @Override
    public void notifyObserver() {
        for(Observer observer : observerList){
            observer.updateData(data);
        }
    }
    void setData(String data){
        this.data = data ;
        notifyObserver();
    }
}

class PhoneUsers implements Observer{
    private String data ;
    @Override
    public void updateData(String data) {
        this.data = data ;
        displayData();
    }
    public void displayData(){
        System.out.println("CURRENT STATUS -> " + data);
    }
}